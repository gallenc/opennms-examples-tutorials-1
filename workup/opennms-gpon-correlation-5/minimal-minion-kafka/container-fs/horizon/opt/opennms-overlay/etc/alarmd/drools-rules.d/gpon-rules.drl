/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2019 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2019 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/
/* EXAMPLE this rule definition only creates a situation for accumulated alarms  */
package org.opennms.netmgt.alarmd.drools;

import java.util.Date;
import org.kie.api.time.SessionClock;
import org.opennms.netmgt.model.OnmsAlarm;
import org.opennms.netmgt.model.OnmsSeverity;

import org.opennms.netmgt.model.TroubleTicketState;
import org.opennms.netmgt.model.OnmsNode;
import org.opennms.netmgt.model.OnmsAssetRecord;

import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.xml.event.AlarmData;
import org.opennms.netmgt.alarmd.drools.AlarmService;
import org.opennms.netmgt.model.OnmsEventParameter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map.Entry;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.io.PrintWriter;
import java.io.StringWriter;

global org.opennms.netmgt.alarmd.drools.AlarmService alarmService;

declare org.opennms.netmgt.model.OnmsAlarm
    @role(event)
    @timestamp(lastUpdateTime)
end


rule "parent situation rule"
  no-loop true
  
  when
    $sessionClock : SessionClock()

              

    // get alarm with correct category
    $alarm : OnmsAlarm(alarmType == OnmsAlarm.PROBLEM_TYPE || alarmType == OnmsAlarm.PROBLEM_WITHOUT_RESOLUTION_TYPE,
                       $alarm.isAcknowledged() == false,
                       lastEvent != null,
                       node != null,
                       node.parent !=null,
                       node.getAssetRecord().getDisplayCategory() in ("ONT", "SECONDARY_NODE"),
                       $alarmEventParameters : eventParameters
                      )
                      
    // get related alarms with correct category LinkedList(size >= 4 )
    $relatedAlarms : LinkedList() from collect ( OnmsAlarm(alarmType == OnmsAlarm.PROBLEM_TYPE || alarmType == OnmsAlarm.PROBLEM_WITHOUT_RESOLUTION_TYPE, 
                   severity != OnmsSeverity.CLEARED, 
                   node != null,
                   node.parent !=null,
                   node.getParent().getId() == $alarm.getNode().getParent().getId(),
                   lastEvent != null,
                   $relatedEventParameters : eventParameters,
                   matchEventParameter(alarmService, "LogName", findEventParameter(alarmService, "LogName", $alarmEventParameters) , $relatedEventParameters)                   
                  ) )


    // get any situations for parent nodeId where the LogName parameter matches the LogName for this situation
    // there can be only one uncleared situation per LogName per parent node
    $situations : LinkedList() from collect ( OnmsAlarm( $situationEventParameters : eventParameters,
                   isSituation() == true, // problem because can be not a situation but still with event paramaters
                   //matchSituationParameter(alarmService, $situationEventParameters),
                   severity != OnmsSeverity.CLEARED,
                   nodeId ==  $alarm.getNode().getParent().getId(),
                   matchEventParameter(alarmService, "LogName", findEventParameter(alarmService, "LogName", $alarmEventParameters) , $situationEventParameters)                   
                  ) )

  then
 
    Date now = new Date(drools.getWorkingMemory().getSessionClock().getCurrentTime());
    
    String logName = findEventParameter(alarmService, "LogName", $alarmEventParameters);
    
    
    // debugging messages - note change to alarmService.debug in production
    alarmService.warn("parent situation rule: **** found alarm details {} for alarm {} LogName {}", getAlarmDetails($alarm), $alarm, logName);
    alarmService.warn("parent situation rule: $alarm.getNode().getParent().getId():"+$alarm.getNode().getParent().getId());
    
    alarmService.warn("parent situation rule: relatedAlarms size {}", $relatedAlarms.size() );
    for (Object onmsAlarmObject: $relatedAlarms){
        OnmsAlarm relatedAlarm = (OnmsAlarm) onmsAlarmObject;
        alarmService.warn("parent situation rule: existing relatedAlarm {}", relatedAlarm);
    }
    alarmService.warn("parent situation rule: existing situations size {}", $situations.size() );
    for (Object onmsAlarmObject: $situations){
        OnmsAlarm situation = (OnmsAlarm) onmsAlarmObject;
        alarmService.warn("parent situation rule: existing situation {}", situation);
    }
    
    // end of debugging messages
    
  
    
    // get any existing alarm reduction keys from any current matching situation
    // this allows us to re-inject the other matching alarms in the update event
    // assumes only one matching situation from rule
    Set<String> alarmReductionKeys= new LinkedHashSet<String>();
    
    String msg = "related alarms: ";
    for(Object onmsAlarmObject : $relatedAlarms){
         OnmsAlarm relatedAlarm = (OnmsAlarm) onmsAlarmObject;
         if(relatedAlarm.getSeverity() != OnmsSeverity.CLEARED ) {
             alarmService.warn("parent situation rule: adding reduction key from relatedAlarm {}", relatedAlarm);
             alarmReductionKeys.add(relatedAlarm.getReductionKey());
             msg = msg +" "+ relatedAlarm.getId() +" "+ relatedAlarm.getSeverity().toString() +" |";
         } else {
             alarmService.warn("parent situation rule: not adding reduction key from cleared relatedAlarm {}", relatedAlarm);
         }
    }
    
    // todo update severity
//              String childrenStr = matchedSituation.getNode().getAssetRecord().getHdd1();
//              if (childrenStr !=null && ! childrenStr.isBlank() ) try {
//                  Integer childrenNo= Integer.parseInt( childrenStr);
//                  allChildrenAlarm = ( relatedAlarms.size() >= childrenNo );
//                  if (allChildrenAlarm && matchedSituation.getSeverity() != OnmsSeverity.CRITICAL ) {
                      // alarmService.warn("parent situation rule: all nodes in alarm - escalated severity of matchedSituation "+ matchedSituation.getId() );
                      // TODO alarmService.setSeverity(matchedSituation, OnmsSeverity.CRITICAL, now);
//                      msg= "All Children alarms: "+msg;
//                  }
//              } catch (Exception ex) {
//                  alarmService.warn("parent situation rule: cant parse asset HDD1 "+exceptionStackTraceToString(ex));
//              }

    alarmService.acknowledgeAlarm($alarm, now);
    
    if (! $relatedAlarms.isEmpty()) {
        int nodeId = $alarm.getNode().getParent().getId();
        sendUdateSituationEvent(alarmService, nodeId, logName, alarmReductionKeys, OnmsSeverity.NORMAL, msg, now);
    }



end

// this is needed because situations can become simple alarms rather than clearning when associated alarms are cleared (needs investigated)
rule "clear uncleared situations"
  when
    $sessionClock : SessionClock()

    // get old situation alarm which has not been cleared
    $alarm : OnmsAlarm(isSituation() == false, 
                       severity != OnmsSeverity.CLEARED,
                       $alarmEventParameters : eventParameters,
                       matchSituationParameter(alarmService, $alarmEventParameters)
                      )
                      
   then
       alarmService.warn("clear uncleared situations rule clearing alarm id  "+$alarm.getId());
       alarmService.clearAlarm($alarm, new Date($sessionClock.getCurrentTime()));
end


/* searchs eventParameters list and returns value matching the name key. Returns null if not found or if inputs are null */
function String findEventParameter(AlarmService alarmService, String name, List eventParameters) {
    String value = null;

    if( name == null || eventParameters==null || eventParameters.isEmpty() ) {
       value = null;
    } else {
       for (Object paramObj : eventParameters) {
          OnmsEventParameter param = (OnmsEventParameter) paramObj;
          // alarmService.warn(" findEventParameter searching name "+param.getName()+" value "+param.getValue() );
          if (name.equals(param.getName())) {
            value = param.getValue();
            break;
          }
       }
    }
    alarmService.warn("findEventParameter result name "+name+" found value "+value);
    return value;
}

/* searchs eventParameters list and returns true if name key with matching value is found. returns false if inputs are null */
function boolean matchEventParameter(AlarmService alarmService, String name, String value, List eventParameters) {
    boolean found = false;
    if( name == null || value==null || eventParameters==null || eventParameters.isEmpty() ) {
      found =false ;
    } else {
       String foundValue = findEventParameter(alarmService, name, eventParameters);
       found = value.equals(foundValue);
    }
    alarmService.warn("matchEventParameter found="+found+" name "+name+" value "+value);
    return found;
}

function String printEventParameters(AlarmService alarmService, List eventParameters) {
    String result="parameters:[";
    for (Object paramObj : eventParameters) {
          OnmsEventParameter param = (OnmsEventParameter) paramObj;
          result=result+"{ name: "+param.getName()+", value: "+param.getValue()+"}";
    }
    return result+"]";
}

/* searchs eventParameters list and returns true if any name key related-reductionKey-* is found. returns false if inputs are null */
function boolean matchSituationParameter(AlarmService alarmService, List eventParameters) {
    boolean found = false;
    String value = null;
    String name = null;
    
    if( eventParameters==null || eventParameters.isEmpty() ) {
      found =false ;
    } else {
      for (Object paramObj : eventParameters) {
          OnmsEventParameter param = (OnmsEventParameter) paramObj;
          //alarmService.warn(" matchSituationParameter name searching "+param.getName()+" value "+param.getValue() );
          if (param.getName().startsWith("related-reductionKey-")) {
            value = param.getValue();
            name = param.getName();
            found = true;
            break;
          }
       }
    }
    
    alarmService.warn("matchSituationParameter found="+found+" name "+name+" value "+value);
    return found;
}


/* creates and sends a situation update event with the severity of the alarm raising the event */
/* see code in isRelatedReductionKeyWithContent(Parm param) in AlarmPersisterImpl to see how alarms are tagged as situations */
/* if any param with name beginning 'related-reductionKey' exists this is used to match the related alarm reduction keys and mark this alarm as a situation. */
function void sendUdateSituationEvent(AlarmService alarmService, Integer nodeId, String logName, Set alarmReductionKeys, OnmsSeverity currentSeverity, String msg, Date date) {
        EventBuilder builder = new EventBuilder("uei.opennms.org/alarms/drools/situation", "drools", date);
        AlarmData data = new AlarmData();
        //data.setAlarmType(1); 
        // data.setReductionKey(reductionKey);
        //builder.setAlarmData(data);
        
        // set initial severity of drools situation one greater than alarm severity to avoid double events because of situation severity accumulation rules
        if(currentSeverity !=null) {
              // not sure how indeterminate will be handled in alarmd situations but there shouldnt be any - just set cleared
              if(OnmsSeverity.INDETERMINATE == currentSeverity ){
                 builder.setSeverity(OnmsSeverity.CLEARED.getLabel());
              } else if(OnmsSeverity.CLEARED == currentSeverity ){
                 builder.setSeverity(OnmsSeverity.CLEARED.getLabel());
              } else {
                 int currentSeverityInt = currentSeverity.getId();
                 int newSeverity = (currentSeverityInt >= OnmsSeverity.CRITICAL.getId()) ? OnmsSeverity.CRITICAL.getId() : currentSeverityInt + 1;
                 builder.setSeverity(OnmsSeverity.get(newSeverity).getLabel());
              }
        }
        
        builder.setNodeid(nodeId);
        builder.setLogDest("logndisplay");
        builder.setLogMessage("updating situation");
        for (Object reduxObj : alarmReductionKeys) {
             String redux = (String) reduxObj;
            // TOOD revisit when event_parameters table supports multiple params with the same name (NMS-10214)
            // For now, suffix the parameter name with the value.
            builder.addParam("related-reductionKey-" + redux.hashCode(), redux);
        }
        builder.addParam("lastEventMsg", msg);
        builder.addParam("situationDescr","drools situation LogName: "+logName+" "+msg);
        builder.addParam("situationLogMsg","drools situation LogName: "+logName+" "+msg);
        
        builder.addParam("LogName", logName);
        alarmService.warn("alarm service sending update situation event: {}", builder.getEvent());
        alarmService.sendEvent(builder.getEvent());
}


/* sends a simple event to the event bus */
function void sendSimpleEvent(AlarmService alarmService, Integer nodeId, String uei, OnmsSeverity severity, String msg) {
        EventBuilder builder = new EventBuilder(uei, "drools");
        AlarmData data = new AlarmData();
        builder.setNodeid(nodeId);
        builder.setLogDest("logndisplay");
        builder.setLogMessage(msg);
        builder.setSeverity(severity.getLabel());
        alarmService.warn("alarm service sending new simple event: {}", builder.getEvent());
        alarmService.sendEvent(builder.getEvent());
}


/* Used for debugging messages. Provides a toString() of the  node details and parent nodeId for a given alarm */
function String getAlarmDetails(OnmsAlarm alarm){

   String msg="";

   String nodeLabel = null;
   String foreignId = null;
   String foreignSource = null;

   String displayCategory = null;
   String managedObjectType = null;
   String managedObjectInstance = null;
   
   String parentNodeLabel = null;
   String parentForeignId = null;
   String parentForeignSource = null;
   Integer parentId = null;
   
   try {
      OnmsNode node = alarm.getNode();
      if (node!=null) {
         nodeLabel = node.getLabel();
         foreignId = node.getForeignId();
         foreignSource = node.getForeignSource();
      
         OnmsAssetRecord assetRecord = node.getAssetRecord();
         if (assetRecord!=null){
            displayCategory = assetRecord.getDisplayCategory();
            managedObjectType = assetRecord.getManagedObjectType();
            managedObjectInstance = assetRecord.getManagedObjectInstance();
         }
      
         OnmsNode parent = node.getParent();
         if (parent !=null){
            parentId = parent.getId();
            // we can only get the parent id because we are not in a hibernate session and lazy initialise of parent.getLabel() etc.
         }
      }

   }  catch ( Exception ex) {
      msg = msg+ "error getAlarmDetails\n" + exceptionStackTraceToString(ex)+"\n"; 
   }

   msg = msg+ "alarm node details: "+
      " nodeLabel ="+ nodeLabel +
      " foreignId ="+ foreignId +
      " foreignSource ="+ foreignSource +
      " displayCategory ="+ displayCategory +
      " managedObjectType ="+ managedObjectType +
      " managedObjectInstance ="+  managedObjectInstance +
      " parentId ="+ parentId;
      
  return msg;
}

/* returns stacktrace of exception as string */
function String exceptionStackTraceToString(Exception ex){
      StringWriter sw = new StringWriter();
      ex.printStackTrace(new PrintWriter(sw));
      return sw.toString();
}



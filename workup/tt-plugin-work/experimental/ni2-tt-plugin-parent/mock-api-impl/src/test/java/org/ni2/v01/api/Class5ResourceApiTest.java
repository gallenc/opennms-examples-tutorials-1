/**
 * Ni2 Deck API Gateway
 * Ni2 Deck API Gateway Description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ni2.v01.api;

import org.ni2.v01.model.DefaultSearchBody;
import org.ni2.v01.model.Described;
import org.ni2.v01.model.DescribedResultResponse;
import org.ni2.v01.model.Minimal;
import org.ni2.v01.model.MinimalResultResponse;
import org.ni2.v01.model.ResourceControllerGetResourceExtended200Response;
import org.ni2.v01.model.ResourceExtendedResultResponse;
import org.ni2.v01.model.ResourceIdsBody;
import org.ni2.v01.model.UpdateDescribedBody;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Ni2 Deck API Gateway
 *
 * <p>Ni2 Deck API Gateway Description
 *
 * API tests for Class5ResourceApi
 */
public class Class5ResourceApiTest {


    private Class5ResourceApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("http://localhost", Class5ResourceApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Retrieves the base information of the Resource identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerGetResourceBaseTest() {
        String resourceId = null;
        //Described response = api.resourceControllerGetResourceBase(resourceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Resource identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerGetResourceExtendedTest() {
        String resourceId = null;
        //ResourceControllerGetResourceExtended200Response response = api.resourceControllerGetResourceExtended(resourceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Resource identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerGetResourceMinimalTest() {
        String resourceId = null;
        //Minimal response = api.resourceControllerGetResourceMinimal(resourceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Releases all the Resources linked to the common Reservation Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerReleaseAllResourceTest() {
        String reservationId = null;
        //api.resourceControllerReleaseAllResource(reservationId);
        
        // TODO: test validations


    }
    
    /**
     * Releases the Resources linked to the common Reservation Id and identified by the Resources Ids
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerReleaseResourceTest() {
        String reservationId = null;
        ResourceIdsBody resourceIdsBody = null;
        //api.resourceControllerReleaseResource(reservationId, resourceIdsBody);
        
        // TODO: test validations


    }
    
    /**
     * Reserves Resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerReserveResourceTest() {
        String body = null;
        //api.resourceControllerReserveResource(body);
        
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Resources resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerSearchResourceBaseTest() {
        DefaultSearchBody defaultSearchBody = null;
        //DescribedResultResponse response = api.resourceControllerSearchResourceBase(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Resources resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerSearchResourceExntededTest() {
        DefaultSearchBody defaultSearchBody = null;
        //ResourceExtendedResultResponse response = api.resourceControllerSearchResourceExnteded(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Resources resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerSearchResourceMinimalTest() {
        DefaultSearchBody defaultSearchBody = null;
        //MinimalResultResponse response = api.resourceControllerSearchResourceMinimal(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Updates the Resource identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerUpdateResourceTest() {
        String resourceId = null;
        UpdateDescribedBody updateDescribedBody = null;
        //api.resourceControllerUpdateResource(resourceId, updateDescribedBody);
        
        // TODO: test validations


    }
    
}

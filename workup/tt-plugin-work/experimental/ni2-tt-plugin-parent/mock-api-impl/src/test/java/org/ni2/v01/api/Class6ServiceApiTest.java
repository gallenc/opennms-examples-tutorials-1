/**
 * Ni2 Deck API Gateway
 * Ni2 Deck API Gateway Description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ni2.v01.api;

import org.ni2.v01.model.Minimal;
import org.ni2.v01.model.MinimalResultResponse;
import org.ni2.v01.model.Service;
import org.ni2.v01.model.ServiceBaseResultResponse;
import org.ni2.v01.model.ServiceExtended;
import org.ni2.v01.model.ServiceExtendedResultResponse;
import org.ni2.v01.model.ServiceHierarchical;
import org.ni2.v01.model.ServiceHierarchicalResultResponse;
import org.ni2.v01.model.ServiceSearchBody;
import org.ni2.v01.model.UpdateDescribedBody;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Ni2 Deck API Gateway
 *
 * <p>Ni2 Deck API Gateway Description
 *
 * API tests for Class6ServiceApi
 */
public class Class6ServiceApiTest {


    private Class6ServiceApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("http://localhost", Class6ServiceApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Retrieves the base information of the Service identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerGetServiceBaseTest() {
        String serviceId = null;
        //Service response = api.serviceControllerGetServiceBase(serviceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Service identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerGetServiceExtendedTest() {
        String serviceId = null;
        //ServiceExtended response = api.serviceControllerGetServiceExtended(serviceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Service identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerGetServiceHierarchicalTest() {
        String serviceId = null;
        //ServiceHierarchical response = api.serviceControllerGetServiceHierarchical(serviceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Service identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerGetServiceMinimalTest() {
        String serviceId = null;
        //Minimal response = api.serviceControllerGetServiceMinimal(serviceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Services resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerSearchServiceBaseTest() {
        ServiceSearchBody serviceSearchBody = null;
        //ServiceBaseResultResponse response = api.serviceControllerSearchServiceBase(serviceSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Services resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerSearchServiceExtendedTest() {
        ServiceSearchBody serviceSearchBody = null;
        //ServiceExtendedResultResponse response = api.serviceControllerSearchServiceExtended(serviceSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Services resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerSearchServiceHierarchicalTest() {
        ServiceSearchBody serviceSearchBody = null;
        //ServiceHierarchicalResultResponse response = api.serviceControllerSearchServiceHierarchical(serviceSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Services resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerSearchServiceMinimalTest() {
        ServiceSearchBody serviceSearchBody = null;
        //MinimalResultResponse response = api.serviceControllerSearchServiceMinimal(serviceSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Updates the Service identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerUpdateServiceTest() {
        String serviceId = null;
        UpdateDescribedBody updateDescribedBody = null;
        //api.serviceControllerUpdateService(serviceId, updateDescribedBody);
        
        // TODO: test validations


    }
    
}

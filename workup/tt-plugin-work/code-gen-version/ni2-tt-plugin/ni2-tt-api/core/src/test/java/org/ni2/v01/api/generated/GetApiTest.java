/**
 * Ni2 Deck API Gateway
 * Ni2 Deck API Gateway Description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ni2.v01.api.generated;

import org.ni2.v01.api.GetApi;
import org.ni2.v01.model.Address;
import org.ni2.v01.model.Described;
import org.ni2.v01.model.Event;
import org.ni2.v01.model.EventExtended;
import org.ni2.v01.model.EventHierarchical;
import org.ni2.v01.model.Minimal;
import org.ni2.v01.model.Order;
import org.ni2.v01.model.OrderExtended;
import org.ni2.v01.model.OrderHierarchical;
import org.ni2.v01.model.Party;
import org.ni2.v01.model.PartyExtended;
import org.ni2.v01.model.ResourceControllerGetResourceExtended200Response;
import org.ni2.v01.model.Service;
import org.ni2.v01.model.ServiceExtended;
import org.ni2.v01.model.ServiceHierarchical;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Ni2 Deck API Gateway
 *
 * <p>Ni2 Deck API Gateway Description
 *
 * API tests for GetApi
 */
public class GetApiTest {


    private GetApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("http://localhost", GetApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Retrieves the base information of the Address identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerGetAddressBaseTest() {
        String addressId = null;
        //Address response = api.addressControllerGetAddressBase(addressId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Address identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerGetAddressMinimalTest() {
        String addressId = null;
        //Minimal response = api.addressControllerGetAddressMinimal(addressId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Event identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventControllerGetEventBaseTest() {
        String eventId = null;
        //Event response = api.eventControllerGetEventBase(eventId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Event identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventControllerGetEventExtendedTest() {
        String eventId = null;
        //EventExtended response = api.eventControllerGetEventExtended(eventId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Event identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventControllerGetEventHierarchicalTest() {
        String eventId = null;
        //EventHierarchical response = api.eventControllerGetEventHierarchical(eventId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Event identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventControllerGetEventMinimalTest() {
        String eventId = null;
        //Minimal response = api.eventControllerGetEventMinimal(eventId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Order identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderControllerGetOrderBaseTest() {
        String orderId = null;
        //Order response = api.orderControllerGetOrderBase(orderId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Address identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderControllerGetOrderExtendedTest() {
        String orderId = null;
        //OrderExtended response = api.orderControllerGetOrderExtended(orderId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Address identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderControllerGetOrderHierarchicalTest() {
        String orderId = null;
        //OrderHierarchical response = api.orderControllerGetOrderHierarchical(orderId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Order identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderControllerGetOrderMinimalTest() {
        String orderId = null;
        //Minimal response = api.orderControllerGetOrderMinimal(orderId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Party identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerGetPartyBaseTest() {
        String partyId = null;
        //Party response = api.partyControllerGetPartyBase(partyId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Address identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerGetPartyExtendedTest() {
        String partyId = null;
        //PartyExtended response = api.partyControllerGetPartyExtended(partyId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Party identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerGetPartyMinimalTest() {
        String partyId = null;
        //Minimal response = api.partyControllerGetPartyMinimal(partyId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Resource identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerGetResourceBaseTest() {
        String resourceId = null;
        //Described response = api.resourceControllerGetResourceBase(resourceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Resource identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerGetResourceExtendedTest() {
        String resourceId = null;
        //ResourceControllerGetResourceExtended200Response response = api.resourceControllerGetResourceExtended(resourceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Resource identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerGetResourceMinimalTest() {
        String resourceId = null;
        //Minimal response = api.resourceControllerGetResourceMinimal(resourceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Service identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerGetServiceBaseTest() {
        String serviceId = null;
        //Service response = api.serviceControllerGetServiceBase(serviceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Service identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerGetServiceExtendedTest() {
        String serviceId = null;
        //ServiceExtended response = api.serviceControllerGetServiceExtended(serviceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Service identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerGetServiceHierarchicalTest() {
        String serviceId = null;
        //ServiceHierarchical response = api.serviceControllerGetServiceHierarchical(serviceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Service identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerGetServiceMinimalTest() {
        String serviceId = null;
        //Minimal response = api.serviceControllerGetServiceMinimal(serviceId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
}

/**
 * Ni2 Deck API Gateway
 * Ni2 Deck API Gateway Description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.ni2.v01.api.tt.test;

import org.ni2.v01.api.Class0AuthenticationApi;
import org.ni2.v01.api.Class3EventApi;
import org.ni2.v01.api.CreateApi;
import org.ni2.v01.api.DeleteApi;
import org.ni2.v01.api.GetApi;
import org.ni2.v01.api.SearchApi;
import org.ni2.v01.api.UpdateApi;
import org.ni2.v01.api.utils.TLSUtils;
import org.ni2.v01.model.AddressCreateBodyCustomAttributesValue;
import org.ni2.v01.model.AuthenticationControllerLogin200Response;
import org.ni2.v01.model.AuthenticationControllerLoginRequest;
import org.ni2.v01.model.InstanceURL;
import org.ni2.v01.model.EventCreateBody;
import org.ni2.v01.model.EventExtended;
import org.ni2.v01.model.EventUpdateBody;
import org.ni2.v01.model.ActionBody;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;

import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * API tests for Ni2TroubleTicketApi
 * These tests run against a simulator running at http://localhost:8080
 * Note to run these manually in the IDE, make sure the simulator is first running.
 * You can do this by running mvn spring-boot:run in the ni2-tt-plugin-spring-mock-api-mpl module
 * Alternatively mvn jetty:run-war in this project will run the same implementation in Jetty - but it is probably better not to do this
 * while actively working on this project module.
 * 
 */
public class Ni2TroubleTicketApiTest {

   public static final String DEFAULT_TT_SERVER_URL = "http://localhost:8080";
   public static final String DEFAULT_TT_USERNAME = "username";
   public static final String DEFAULT_TT_PASSWORD = "password";

   public String ttServerUrl = DEFAULT_TT_SERVER_URL;
   public String ttUsername = DEFAULT_TT_USERNAME;
   public String ttPassword = DEFAULT_TT_PASSWORD;

   private Class0AuthenticationApi authenticationApi;
   private CreateApi createApi;
   private DeleteApi deleteApi;
   private GetApi getApi;
   private SearchApi searchApi;
   private UpdateApi updateApi;

   private Class3EventApi eventApi;

   public void setTtServerUrl(String ttServerUrl) {
      this.ttServerUrl = ttServerUrl;
   }

   public void setTtUsername(String ttUsername) {
      this.ttUsername = ttUsername;
   }

   public void setTtPassword(String ttPassword) {
      this.ttPassword = ttPassword;
   }

   @Before
   public void setup() {
      JacksonJsonProvider provider = new JacksonJsonProvider();
      List providers = new ArrayList();
      providers.add(provider);

      System.out.println("ttServerURL=" + ttServerUrl);

      authenticationApi = JAXRSClientFactory.create(ttServerUrl, Class0AuthenticationApi.class, providers);
      org.apache.cxf.jaxrs.client.Client authenticationClient = WebClient.client(authenticationApi);
      ClientConfiguration authenticationConfig = WebClient.getConfig(authenticationClient);
      TLSUtils.addX509TrustManager(authenticationConfig);

      String bearerToken = getBearerToken(); // uses authentication api

      createApi = JAXRSClientFactory.create(ttServerUrl, CreateApi.class, providers);
      org.apache.cxf.jaxrs.client.Client createClient = WebClient.client(createApi).header("Authorization", "Bearer " + bearerToken);
      ClientConfiguration createConfig = WebClient.getConfig(createClient);
      TLSUtils.addX509TrustManager(createConfig);

      deleteApi = JAXRSClientFactory.create(ttServerUrl, DeleteApi.class, providers);
      org.apache.cxf.jaxrs.client.Client deleteClient = WebClient.client(deleteApi).header("Authorization", "Bearer " + bearerToken);
      ClientConfiguration deleteConfig = WebClient.getConfig(deleteClient);
      TLSUtils.addX509TrustManager(deleteConfig);

      getApi = JAXRSClientFactory.create(ttServerUrl, GetApi.class, providers);
      // need to add default media type as not in swagger spec and otherwise generates content-type:*/* which spring simulator doesn't like
      org.apache.cxf.jaxrs.client.Client getClient = WebClient.client(getApi).type(MediaType.APPLICATION_JSON).header("Authorization", "Bearer " + bearerToken);
      ClientConfiguration getConfig = WebClient.getConfig(getClient);
      TLSUtils.addX509TrustManager(getConfig);

      searchApi = JAXRSClientFactory.create(ttServerUrl, SearchApi.class, providers);
      org.apache.cxf.jaxrs.client.Client searchClient = WebClient.client(searchApi).header("Authorization", "Bearer " + bearerToken);
      ClientConfiguration searchConfig = WebClient.getConfig(searchClient);
      TLSUtils.addX509TrustManager(searchConfig);

      updateApi = JAXRSClientFactory.create(ttServerUrl, UpdateApi.class, providers);
      org.apache.cxf.jaxrs.client.Client updateClient = WebClient.client(createApi).header("Authorization", "Bearer " + bearerToken);
      ClientConfiguration updateConfig = WebClient.getConfig(createClient);
      TLSUtils.addX509TrustManager(updateConfig);

      eventApi = JAXRSClientFactory.create(ttServerUrl, Class3EventApi.class, providers);
      org.apache.cxf.jaxrs.client.Client eventClient = WebClient.client(eventApi).header("Authorization", "Bearer " + bearerToken);
      ClientConfiguration eventClientConfig = WebClient.getConfig(eventClient);
      TLSUtils.addX509TrustManager(eventClientConfig);

   }

   private String getBearerToken() {
      AuthenticationControllerLoginRequest authenticationControllerLoginRequest = new AuthenticationControllerLoginRequest()
               .username(ttUsername)
               .password(ttPassword);
      AuthenticationControllerLogin200Response response = authenticationApi.authenticationControllerLogin(authenticationControllerLoginRequest);
      assertNotNull(response);

      String accessToken = response.getAccessToken();
      System.out.println("received accessToken:" + accessToken);

      return accessToken;

   }

   /**
    * Authenticate to the application
    *
    * @throws ApiException
    *          if the Api call fails
    */
   @Test
   public void authenticationControllerLoginTest() {
      System.out.println("start of test authenticationControllerLoginTest()");
      String bearer = getBearerToken();

      System.out.println("end of test");
   }

   @Test
   public void createAndTestTroubleTicket() {
      System.out.println("start of test createTroubleTicket()");

      EventCreateBody eventCreateBody = new EventCreateBody();

      // a bit strange - how we create the custom attributes
      Map<String, AddressCreateBodyCustomAttributesValue> customAttributeValue = new LinkedHashMap<String, AddressCreateBodyCustomAttributesValue>();

      // "Category": "{{categoryUpdated}}",
      customAttributeValue.put("Category", new AddressCreateBodyCustomAttributesValue("Network"));

      // "AlarmSource": "{{alarmSource}}",
      customAttributeValue.put("AlarmSource", new AddressCreateBodyCustomAttributesValue("OpenNMS"));

      // "AlarmId": "{{alarmId}}"
      customAttributeValue.put("AlarmId", new AddressCreateBodyCustomAttributesValue("1234xyz"));

      eventCreateBody.classificationPath("Event(\"Event/Support/Incident/Monitoring Incident\")")
               .description("description")
               .longDescription("long description")
               .customAttributes(customAttributeValue)
               .resourceIds(Arrays.asList("monaco_01"));

      InstanceURL instanceUrlResponse = createApi.eventControllerCreateEvent(eventCreateBody);
      assertNotNull(instanceUrlResponse);
      System.out.println("received  instanceUrlResponse:" + instanceUrlResponse);

      System.out.println("start of test getTroubleTicket()");
      String eventId = instanceUrlResponse.getUniversalId();
      EventExtended extendedEventResponse = getApi.eventControllerGetEventExtended(eventId);
      assertNotNull(extendedEventResponse);
      System.out.println("received  extendedEventResponse:" + extendedEventResponse);

      System.out.println("start of test cancelTroubleTicket()");
      EventUpdateBody eventUpdateBody = new EventUpdateBody();
      ActionBody actionBody = new ActionBody().action("Cancel").comment("test cancelled event");
      eventApi.eventControllerExecuteLifecycleAction(eventId, actionBody);
      // check cancelled
      extendedEventResponse = getApi.eventControllerGetEventExtended(eventId);
      assertNotNull(extendedEventResponse);
      System.out.println("received  extendedEventResponse:" + extendedEventResponse);

      // NOTE CANNOT CLOSE TROUBLE TICKET
      //      System.out.println("start of test closeTroubleTicket()");
      //      eventUpdateBody = new EventUpdateBody();
      //      actionBody = new ActionBody().action("Close").comment("test closed event");
      //      eventApi.eventControllerExecuteLifecycleAction(eventId, actionBody);
      //      // check closed
      //      extendedEventResponse = getApi.eventControllerGetEventExtended(eventId);
      //      assertNotNull(extendedEventResponse);
      //      System.out.println("received  extendedEventResponse:" +  extendedEventResponse);

      System.out.println("end of test");

   }

   @Test
   public void createAndTestTroubleTicketUsingEventApi() {
      System.out.println("start of test createAndTestTroubleTicketUsingEventApi()");

      EventCreateBody eventCreateBody = new EventCreateBody();

      // a bit strange - how we create the custom attributes
      Map<String, AddressCreateBodyCustomAttributesValue> customAttributeValue = new LinkedHashMap<String, AddressCreateBodyCustomAttributesValue>();

      // "Category": "{{categoryUpdated}}",
      customAttributeValue.put("Category", new AddressCreateBodyCustomAttributesValue("Network"));

      // "AlarmSource": "{{alarmSource}}",
      customAttributeValue.put("AlarmSource", new AddressCreateBodyCustomAttributesValue("OpenNMS"));

      // "AlarmId": "{{alarmId}}"
      customAttributeValue.put("AlarmId", new AddressCreateBodyCustomAttributesValue("1234xyz"));

      eventCreateBody.classificationPath("Event(\"Event/Support/Incident/Monitoring Incident\")")
               .description("description")
               .longDescription("long description")
               .customAttributes(customAttributeValue)
               .resourceIds(Arrays.asList("monaco_01"));

      InstanceURL instanceUrlResponse = eventApi.eventControllerCreateEvent(eventCreateBody);
      assertNotNull(instanceUrlResponse);
      System.out.println("received  instanceUrlResponse:" + instanceUrlResponse);

      System.out.println("start of test getTroubleTicket()");
      String eventId = instanceUrlResponse.getUniversalId();
      EventExtended extendedEventResponse = eventApi.eventControllerGetEventExtended(eventId);
      assertNotNull(extendedEventResponse);
      System.out.println("received  extendedEventResponse:" + extendedEventResponse);

      System.out.println("start of test cancelTroubleTicket()");
      EventUpdateBody eventUpdateBody = new EventUpdateBody();
      ActionBody actionBody = new ActionBody().action("Cancel").comment("test cancelled event");
      eventApi.eventControllerExecuteLifecycleAction(eventId, actionBody);
      // check cancelled
      extendedEventResponse = eventApi.eventControllerGetEventExtended(eventId);
      assertNotNull(extendedEventResponse);
      System.out.println("received  extendedEventResponse:" + extendedEventResponse);

      // NOTE external source CANNOT CLOSE TROUBLE TICKET
      //      System.out.println("start of test closeTroubleTicket()");
      //      eventUpdateBody = new EventUpdateBody();
      //      actionBody = new ActionBody().action("Close").comment("test closed event");
      //      eventApi.eventControllerExecuteLifecycleAction(eventId, actionBody);
      //      // check closed
      //      extendedEventResponse = getApi.eventControllerGetEventExtended(eventId);
      //      assertNotNull(extendedEventResponse);
      //      System.out.println("received  extendedEventResponse:" +  extendedEventResponse);

      System.out.println("end of test");

   }

   @Test
   public void closeUnknownTroubleTicket() {
      System.out.println("start of test closeUnknownTroubleTicket()");

      System.out.println("end of test");
   }

   @Test
   public void cancelUnknownTroubleTicket() {
      System.out.println("start of test cancelUnknownTroubleTicket()");
      System.out.println("end of test");
   }

   @Test
   public void resolveUnknownTroubleTicket() {
      System.out.println("start of test resolveUnknownTroubleTicket()");

      System.out.println("end of test");
   }

   @Test
   public void getUnknownTroubleTicket() {

      String eventId = "EVT-00000000";
      EventExtended response = getApi.eventControllerGetEventExtended(eventId);
      System.out.println("trouble ticket event: " + response);

      assertNotNull(response);

      // TODO: test validations
      System.out.println("end of test");
   }

}

/**
 * Ni2 Deck API Gateway
 * Ni2 Deck API Gateway Description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ni2.v01.api.generated;

import org.ni2.v01.api.Class1LocationApi;
import org.ni2.v01.model.Address;
import org.ni2.v01.model.AddressBaseResultResponse;
import org.ni2.v01.model.AddressCreateBody;
import org.ni2.v01.model.AddressSearchBody;
import org.ni2.v01.model.AddressUpdateBody;
import org.ni2.v01.model.InstanceURL;
import org.ni2.v01.model.Minimal;
import org.ni2.v01.model.MinimalResultResponse;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Ni2 Deck API Gateway
 *
 * <p>Ni2 Deck API Gateway Description
 *
 * API tests for Class1LocationApi
 */
public class Class1LocationApiTest {


    private Class1LocationApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("http://localhost", Class1LocationApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Creates an Address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerCreateAddressTest() {
        AddressCreateBody addressCreateBody = null;
        //InstanceURL response = api.addressControllerCreateAddress(addressCreateBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Deletes the Address identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerDeleteAddressTest() {
        String addressId = null;
        //api.addressControllerDeleteAddress(addressId);
        
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Address identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerGetAddressBaseTest() {
        String addressId = null;
        //Address response = api.addressControllerGetAddressBase(addressId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Address identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerGetAddressMinimalTest() {
        String addressId = null;
        //Minimal response = api.addressControllerGetAddressMinimal(addressId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Addresses resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerSearchAddressBaseTest() {
        AddressSearchBody addressSearchBody = null;
        //AddressBaseResultResponse response = api.addressControllerSearchAddressBase(addressSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Addresses resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerSearchAddressMinimalTest() {
        AddressSearchBody addressSearchBody = null;
        //MinimalResultResponse response = api.addressControllerSearchAddressMinimal(addressSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Updates the Address identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerUpdateAddressTest() {
        String addressId = null;
        AddressUpdateBody addressUpdateBody = null;
        //api.addressControllerUpdateAddress(addressId, addressUpdateBody);
        
        // TODO: test validations


    }
    
}

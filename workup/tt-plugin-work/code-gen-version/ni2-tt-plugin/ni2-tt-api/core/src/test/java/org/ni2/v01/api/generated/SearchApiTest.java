/**
 * Ni2 Deck API Gateway
 * Ni2 Deck API Gateway Description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ni2.v01.api.generated;

import org.ni2.v01.api.SearchApi;
import org.ni2.v01.model.AddressBaseResultResponse;
import org.ni2.v01.model.AddressSearchBody;
import org.ni2.v01.model.DefaultSearchBody;
import org.ni2.v01.model.DescribedResultResponse;
import org.ni2.v01.model.EventBaseResultResponse;
import org.ni2.v01.model.EventExtendedResultResponse;
import org.ni2.v01.model.EventHierarchicalResultResponse;
import org.ni2.v01.model.EventSearchBody;
import org.ni2.v01.model.MinimalResultResponse;
import org.ni2.v01.model.OrderBaseResultResponse;
import org.ni2.v01.model.OrderExtendedResultResponse;
import org.ni2.v01.model.OrderHierarchicalResultResponse;
import org.ni2.v01.model.OrderSearchBody;
import org.ni2.v01.model.PartyBaseResultResponse;
import org.ni2.v01.model.PartyExtendedResultResponse;
import org.ni2.v01.model.ResourceExtendedResultResponse;
import org.ni2.v01.model.ServiceBaseResultResponse;
import org.ni2.v01.model.ServiceExtendedResultResponse;
import org.ni2.v01.model.ServiceHierarchicalResultResponse;
import org.ni2.v01.model.ServiceSearchBody;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Ni2 Deck API Gateway
 *
 * <p>Ni2 Deck API Gateway Description
 *
 * API tests for SearchApi
 */
public class SearchApiTest {


    private SearchApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("http://localhost", SearchApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Retrieves the base information of the Addresses resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerSearchAddressBaseTest() {
        AddressSearchBody addressSearchBody = null;
        //AddressBaseResultResponse response = api.addressControllerSearchAddressBase(addressSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Addresses resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerSearchAddressMinimalTest() {
        AddressSearchBody addressSearchBody = null;
        //MinimalResultResponse response = api.addressControllerSearchAddressMinimal(addressSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Events resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventControllerSearchEventBaseTest() {
        EventSearchBody eventSearchBody = null;
        //EventBaseResultResponse response = api.eventControllerSearchEventBase(eventSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Events resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventControllerSearchEventExtendedTest() {
        EventSearchBody eventSearchBody = null;
        //EventExtendedResultResponse response = api.eventControllerSearchEventExtended(eventSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Events resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventControllerSearchEventHierarchicalTest() {
        EventSearchBody eventSearchBody = null;
        //EventHierarchicalResultResponse response = api.eventControllerSearchEventHierarchical(eventSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Events resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventControllerSearchEventMinimalTest() {
        EventSearchBody eventSearchBody = null;
        //MinimalResultResponse response = api.eventControllerSearchEventMinimal(eventSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Orders resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderControllerSearchOrderBaseTest() {
        OrderSearchBody orderSearchBody = null;
        //OrderBaseResultResponse response = api.orderControllerSearchOrderBase(orderSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Orders resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderControllerSearchOrderExtendedTest() {
        OrderSearchBody orderSearchBody = null;
        //OrderExtendedResultResponse response = api.orderControllerSearchOrderExtended(orderSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Orders resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderControllerSearchOrderHierarchicalTest() {
        OrderSearchBody orderSearchBody = null;
        //OrderHierarchicalResultResponse response = api.orderControllerSearchOrderHierarchical(orderSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Orders resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderControllerSearchOrderMinimalTest() {
        OrderSearchBody orderSearchBody = null;
        //MinimalResultResponse response = api.orderControllerSearchOrderMinimal(orderSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Parties resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerSearchPartyBaseTest() {
        DefaultSearchBody defaultSearchBody = null;
        //PartyBaseResultResponse response = api.partyControllerSearchPartyBase(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Addresses resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerSearchPartyExtendedTest() {
        DefaultSearchBody defaultSearchBody = null;
        //PartyExtendedResultResponse response = api.partyControllerSearchPartyExtended(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Parties resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerSearchPartyMinimalTest() {
        DefaultSearchBody defaultSearchBody = null;
        //MinimalResultResponse response = api.partyControllerSearchPartyMinimal(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Resources resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerSearchResourceBaseTest() {
        DefaultSearchBody defaultSearchBody = null;
        //DescribedResultResponse response = api.resourceControllerSearchResourceBase(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Resources resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerSearchResourceExntededTest() {
        DefaultSearchBody defaultSearchBody = null;
        //ResourceExtendedResultResponse response = api.resourceControllerSearchResourceExnteded(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Resources resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerSearchResourceMinimalTest() {
        DefaultSearchBody defaultSearchBody = null;
        //MinimalResultResponse response = api.resourceControllerSearchResourceMinimal(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Services resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerSearchServiceBaseTest() {
        ServiceSearchBody serviceSearchBody = null;
        //ServiceBaseResultResponse response = api.serviceControllerSearchServiceBase(serviceSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Services resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerSearchServiceExtendedTest() {
        ServiceSearchBody serviceSearchBody = null;
        //ServiceExtendedResultResponse response = api.serviceControllerSearchServiceExtended(serviceSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Services resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerSearchServiceHierarchicalTest() {
        ServiceSearchBody serviceSearchBody = null;
        //ServiceHierarchicalResultResponse response = api.serviceControllerSearchServiceHierarchical(serviceSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Services resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerSearchServiceMinimalTest() {
        ServiceSearchBody serviceSearchBody = null;
        //MinimalResultResponse response = api.serviceControllerSearchServiceMinimal(serviceSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
}

/**
 * Ni2 Deck API Gateway
 * Ni2 Deck API Gateway Description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ni2.v01.api.generated;

import org.ni2.v01.api.UpdateApi;
import org.ni2.v01.model.AddressUpdateBody;
import org.ni2.v01.model.DocumentationUpdateBody;
import org.ni2.v01.model.EventUpdateBody;
import org.ni2.v01.model.OrderUpdateBody;
import org.ni2.v01.model.PartyUpdateBody;
import org.ni2.v01.model.UpdateDescribedBody;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Ni2 Deck API Gateway
 *
 * <p>Ni2 Deck API Gateway Description
 *
 * API tests for UpdateApi
 */
public class UpdateApiTest {


    private UpdateApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("http://localhost", UpdateApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Updates the Address identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addressControllerUpdateAddressTest() {
        String addressId = null;
        AddressUpdateBody addressUpdateBody = null;
        //api.addressControllerUpdateAddress(addressId, addressUpdateBody);
        
        // TODO: test validations


    }
    
    /**
     * Updates the Documentation identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventControllerUpdateDocumentTest() {
        String documentId = null;
        DocumentationUpdateBody documentationUpdateBody = null;
        //api.eventControllerUpdateDocument(documentId, documentationUpdateBody);
        
        // TODO: test validations


    }
    
    /**
     * Updates the Event identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventControllerUpdateEventTest() {
        String eventId = null;
        EventUpdateBody eventUpdateBody = null;
        //api.eventControllerUpdateEvent(eventId, eventUpdateBody);
        
        // TODO: test validations


    }
    
    /**
     * Updates the Order identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void orderControllerUpdateOrderTest() {
        String orderId = null;
        OrderUpdateBody orderUpdateBody = null;
        //api.orderControllerUpdateOrder(orderId, orderUpdateBody);
        
        // TODO: test validations


    }
    
    /**
     * Updates the Party identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerUpdatePartyTest() {
        String partyId = null;
        PartyUpdateBody partyUpdateBody = null;
        //api.partyControllerUpdateParty(partyId, partyUpdateBody);
        
        // TODO: test validations


    }
    
    /**
     * Updates the Resource identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resourceControllerUpdateResourceTest() {
        String resourceId = null;
        UpdateDescribedBody updateDescribedBody = null;
        //api.resourceControllerUpdateResource(resourceId, updateDescribedBody);
        
        // TODO: test validations


    }
    
    /**
     * Updates the Service identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void serviceControllerUpdateServiceTest() {
        String serviceId = null;
        UpdateDescribedBody updateDescribedBody = null;
        //api.serviceControllerUpdateService(serviceId, updateDescribedBody);
        
        // TODO: test validations


    }
    
}

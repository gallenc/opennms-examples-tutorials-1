/**
 * Ni2 Deck API Gateway
 * Ni2 Deck API Gateway Description
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ni2.v01.api.generated;

import org.ni2.v01.api.Class2PartyApi;
import org.ni2.v01.model.DefaultSearchBody;
import org.ni2.v01.model.InstanceURL;
import org.ni2.v01.model.Minimal;
import org.ni2.v01.model.MinimalResultResponse;
import org.ni2.v01.model.Party;
import org.ni2.v01.model.PartyBaseResultResponse;
import org.ni2.v01.model.PartyCreateBody;
import org.ni2.v01.model.PartyExtended;
import org.ni2.v01.model.PartyExtendedResultResponse;
import org.ni2.v01.model.PartyUpdateBody;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;




/**
 * Ni2 Deck API Gateway
 *
 * <p>Ni2 Deck API Gateway Description
 *
 * API tests for Class2PartyApi
 */
public class Class2PartyApiTest {


    private Class2PartyApi api;

    @Before
    public void setup() {
        JacksonJsonProvider provider = new JacksonJsonProvider();
        List providers = new ArrayList();
        providers.add(provider);

        api = JAXRSClientFactory.create("http://localhost", Class2PartyApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * Creates a Party
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerCreatePartyTest() {
        PartyCreateBody partyCreateBody = null;
        //InstanceURL response = api.partyControllerCreateParty(partyCreateBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Deletes the Party identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerDeletePartyTest() {
        String partyId = null;
        //api.partyControllerDeleteParty(partyId);
        
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Party identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerGetPartyBaseTest() {
        String partyId = null;
        //Party response = api.partyControllerGetPartyBase(partyId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Address identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerGetPartyExtendedTest() {
        String partyId = null;
        //PartyExtended response = api.partyControllerGetPartyExtended(partyId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Party identified by the given universal id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerGetPartyMinimalTest() {
        String partyId = null;
        //Minimal response = api.partyControllerGetPartyMinimal(partyId);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the base information of the Parties resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerSearchPartyBaseTest() {
        DefaultSearchBody defaultSearchBody = null;
        //PartyBaseResultResponse response = api.partyControllerSearchPartyBase(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the extended information of the Addresses resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerSearchPartyExtendedTest() {
        DefaultSearchBody defaultSearchBody = null;
        //PartyExtendedResultResponse response = api.partyControllerSearchPartyExtended(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Retrieves the minimal information of the Parties resulting from the search
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerSearchPartyMinimalTest() {
        DefaultSearchBody defaultSearchBody = null;
        //MinimalResultResponse response = api.partyControllerSearchPartyMinimal(defaultSearchBody);
        //assertNotNull(response);
        // TODO: test validations


    }
    
    /**
     * Updates the Party identified by the given universal Id
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void partyControllerUpdatePartyTest() {
        String partyId = null;
        PartyUpdateBody partyUpdateBody = null;
        //api.partyControllerUpdateParty(partyId, partyUpdateBody);
        
        // TODO: test validations


    }
    
}

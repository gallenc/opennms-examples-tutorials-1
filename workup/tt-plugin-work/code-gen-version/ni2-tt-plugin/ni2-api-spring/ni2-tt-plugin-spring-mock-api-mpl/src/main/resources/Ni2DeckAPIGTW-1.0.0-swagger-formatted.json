{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "operationId": "AuthenticationController_login",
        "summary": "Authenticate to the application",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Authentication information",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Access token (Bearer) retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          }
        },
        "tags": [
          "0. Authentication"
        ]
      }
    },
    "/api/v1/entity/location/create/address": {
      "post": {
        "operationId": "AddressController_createAddress",
        "summary": "Creates an Address",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Address created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceURL"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **UNIVERSALID_ALREADY_EXISTS** - The provided universal id must not already exist\n* **CLASSIFICATION_NOT_FOUND** - The provided classification name should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute, value and itâ€™s expected type\n\t\t"
          }
        },
        "tags": [
          "1. Location",
          "Create"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/location/update/address/{addressId}": {
      "post": {
        "operationId": "AddressController_updateAddress",
        "summary": "Updates the Address identified by the given universal Id",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Address updated"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "1. Location",
          "Update"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/location/delete/address/{addressId}": {
      "post": {
        "operationId": "AddressController_deleteAddress",
        "summary": "Deletes the Address identified by the given universal Id",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Address deleted"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "1. Location",
          "Delete"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/location/get/address/minimal/{addressId}": {
      "post": {
        "operationId": "AddressController_getAddressMinimal",
        "summary": "Retrieves the minimal information of the Address identified by the given universal id",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Address retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Minimal"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "1. Location",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/location/get/address/base/{addressId}": {
      "post": {
        "operationId": "AddressController_getAddressBase",
        "summary": "Retrieves the base information of the Address identified by the given universal id",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Address retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "1. Location",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/location/search/address/minimal": {
      "post": {
        "operationId": "AddressController_searchAddressMinimal",
        "summary": "Retrieves the minimal information of the Addresses resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Addresses retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "1. Location",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/location/search/address/base": {
      "post": {
        "operationId": "AddressController_searchAddressBase",
        "summary": "Retrieves the base information of the Addresses resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Addresses retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressBaseResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "1. Location",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/party/create/party": {
      "post": {
        "operationId": "PartyController_createParty",
        "summary": "Creates a Party",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartyCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Party created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceURL"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **UNIVERSALID_ALREADY_EXISTS** - The provided universal id must not already exist\n* **CLASSIFICATION_NOT_FOUND** - The provided classification name should exist\n* **ADDRESS_NOT_FOUND** - The address identified by the given universal id should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute, value and itâ€™s expected type\n\t"
          }
        },
        "tags": [
          "2. Party",
          "Create"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/party/update/party/{partyId}": {
      "post": {
        "operationId": "PartyController_updateParty",
        "summary": "Updates the Party identified by the given universal Id",
        "parameters": [
          {
            "name": "partyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PartyUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Party updated"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The Party identified by the given universal id should exist\n* **ADDRESS_NOT_FOUND** - The Address identified by the given universal id should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t"
          }
        },
        "tags": [
          "2. Party",
          "Update"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/party/delete/party/{partyId}": {
      "post": {
        "operationId": "PartyController_deleteParty",
        "summary": "Deletes the Party identified by the given universal Id",
        "parameters": [
          {
            "name": "partyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Party deleted"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "2. Party",
          "Delete"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/party/get/party/minimal/{partyId}": {
      "post": {
        "operationId": "PartyController_getPartyMinimal",
        "summary": "Retrieves the minimal information of the Party identified by the given universal id",
        "parameters": [
          {
            "name": "partyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Party retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Minimal"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "2. Party",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/party/get/party/base/{partyId}": {
      "post": {
        "operationId": "PartyController_getPartyBase",
        "summary": "Retrieves the base information of the Party identified by the given universal id",
        "parameters": [
          {
            "name": "partyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Party retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Party"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "2. Party",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/party/get/party/extended/{partyId}": {
      "post": {
        "operationId": "PartyController_getPartyExtended",
        "summary": "Retrieves the extended information of the Address identified by the given universal id",
        "parameters": [
          {
            "name": "partyId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Party retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartyExtended"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "2. Party",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/party/search/party/minimal": {
      "post": {
        "operationId": "PartyController_searchPartyMinimal",
        "summary": "Retrieves the minimal information of the Parties resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Parties retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "2. Party",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/party/search/party/base": {
      "post": {
        "operationId": "PartyController_searchPartyBase",
        "summary": "Retrieves the base information of the Parties resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Parties retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartyBaseResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "2. Party",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/party/search/party/extended": {
      "post": {
        "operationId": "PartyController_searchPartyExtended",
        "summary": "Retrieves the extended information of the Addresses resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Parties retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartyExtendedResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "2. Party",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/create/event": {
      "post": {
        "operationId": "EventController_createEvent",
        "summary": "Creates an Event",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Event created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceURL"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **UNIVERSALID_ALREADY_EXISTS** - The provided universal id must not already exist\n* **CLASSIFICATION_NOT_FOUND** - The provided classification name should exist\n* **CUSTOMER_NOT_FOUND** - The Customer identified by the given universal id should exist\n* **SERVICE_NOT_FOUND** - The Service identified by the given universal id should exist and be assigned to the Customer if given - *returns*: Service Universal Id\n* **RESOURCE_NOT_FOUND** - The Resource identified by the given universal id should exist - *returns*: Resource Universal Id\n* **EVENT_NOT_FOUND** - The Event identified by the given universal id should exist - *returns*: Event Universal Id\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute, value and itâ€™s expected type\n\t"
          }
        },
        "tags": [
          "3. Event",
          "Create"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/update/event/{eventId}": {
      "post": {
        "operationId": "EventController_updateEvent",
        "summary": "Updates the Event identified by the given universal Id",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Event updated"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "3. Event",
          "Update"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/get/event/minimal/{eventId}": {
      "post": {
        "operationId": "EventController_getEventMinimal",
        "summary": "Retrieves the minimal information of the Event identified by the given universal id",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Event retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Minimal"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "3. Event",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/get/event/base/{eventId}": {
      "post": {
        "operationId": "EventController_getEventBase",
        "summary": "Retrieves the base information of the Event identified by the given universal id",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Event retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "3. Event",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/get/event/extended/{eventId}": {
      "post": {
        "operationId": "EventController_getEventExtended",
        "summary": "Retrieves the extended information of the Event identified by the given universal id",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Event retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventExtended"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "3. Event",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/get/event/hierarchical/{eventId}": {
      "post": {
        "operationId": "EventController_getEventHierarchical",
        "summary": "Retrieves the extended information of the Event identified by the given universal id",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Event retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventHierarchical"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "3. Event",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/search/event/minimal": {
      "post": {
        "operationId": "EventController_searchEventMinimal",
        "summary": "Retrieves the minimal information of the Events resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Events retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "3. Event",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/search/event/base": {
      "post": {
        "operationId": "EventController_searchEventBase",
        "summary": "Retrieves the base information of the Events resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Events retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventBaseResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "3. Event",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/search/event/extended": {
      "post": {
        "operationId": "EventController_searchEventExtended",
        "summary": "Retrieves the extended information of the Events resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Events retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventExtendedResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "3. Event",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/search/event/hierarchical": {
      "post": {
        "operationId": "EventController_searchEventHierarchical",
        "summary": "Retrieves the extended information of the Events resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Events retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventHierarchicalResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "3. Event",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/executeLifecycleAction/event/{eventId}": {
      "post": {
        "operationId": "EventController_executeLifecycleAction",
        "summary": "Executes an action on the Event identified by the given universalId",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Action executed"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The Event identified by the given universal id should exist\n* **ACTION_NOT_AVAILABLE** - The given lifecycle action cannot be executed on the Event\n\t"
          }
        },
        "tags": [
          "3. Event"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/document/event/{eventId}": {
      "post": {
        "operationId": "EventController_document",
        "summary": "Documents the Event identified by the given universalId",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentationCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Documentation submitted"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The Event identified by the given universal id should exist\n* **CLASSIFICATION_NOT_FOUND** - The provided classification name should exist\n\t"
          }
        },
        "tags": [
          "3. Event"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/addDocument/event/{eventId}": {
      "post": {
        "operationId": "EventController_addDocument",
        "summary": "Add document to the Event identified by the given universalId",
        "parameters": [
          {
            "name": "eventId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddDocumentationCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Document added"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The Event identified by the given universal id should exist\n* **CLASSIFICATION_NOT_FOUND** - The provided classification name should exist\n* **FILE_EXISTS** - A file with the same name already exists\n* **CONNECTION_ERROR_WITH_REPOSITORY_SYSTEM** - A file with the same name already exists\n\t"
          }
        },
        "tags": [
          "3. Event"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/update/document/{documentId}": {
      "post": {
        "operationId": "EventController_updateDocument",
        "summary": "Updates the Documentation identified by the given universal Id",
        "parameters": [
          {
            "name": "documentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentationUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Documentation updated"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "3. Event",
          "Update"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/create/order/newService": {
      "post": {
        "operationId": "OrderController_createOrderForNewService",
        "summary": "Creates an Order for a new Service",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderNewServiceCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Order for new Service created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceURL"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **UNIVERSALID_ALREADY_EXISTS** - The provided universal id must not already exist\n* **CLASSIFICATION_NOT_FOUND** - The provided classification name should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute, value and itâ€™s expected type\n* **CUSTOMER_NOT_FOUND** - The Customer identified by the given universal id should exist\n* **UNIVERSALID_ALREADY_EXISTS** - The provided universal id for the Service must not already exist\n* **CLASSIFICATION_NOT_FOUND** - The Service classification should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute for the Service does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value for the Service is of the wrong type - *returns*: Custom attribute, value and itâ€™s expected type\n\t"
          }
        },
        "tags": [
          "4. Order",
          "Create"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/create/order/existingService": {
      "post": {
        "operationId": "OrderController_createOrderForExistingService",
        "summary": "Creates an Order for an existing Service",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderExistingServiceCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Order for an existing Service created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceURL"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **UNIVERSALID_ALREADY_EXISTS** - The provided universal id must not already exist\n* **CLASSIFICATION_NOT_FOUND** - The provided classification name should exist\n* **CUSTOMER_NOT_FOUND** - The Customer identified by the given universal id should exist\n* **SERVICE_NOT_FOUND** - The Service identified by the given universal id should exist and be assigned to the Customer if given - *returns*: Service Universal Id\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute, value and itâ€™s expected type\n\t"
          }
        },
        "tags": [
          "4. Order",
          "Create"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/create/order/addOnExistingService": {
      "post": {
        "operationId": "OrderController_createOrderForAddOnExistingService",
        "summary": "Creates an Order for an Add On on an existing Service",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderAddOnExistingServiceCreateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Order for an Add On on an existing Service created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceURL"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **UNIVERSALID_ALREADY_EXISTS** - The provided universal id must not already exist\n* **CLASSIFICATION_NOT_FOUND** - The provided classification name should exist\n* **CUSTOMER_NOT_FOUND** - The Customer identified by the given universal id should exist\n* **SERVICE_NOT_FOUND** - The Service identified by the given universal id should exist and be assigned to the Customer if given - *returns*: Service Universal Id\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute, value and itâ€™s expected type\n\t"
          }
        },
        "tags": [
          "4. Order",
          "Create"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/update/order/{orderId}": {
      "post": {
        "operationId": "OrderController_updateOrder",
        "summary": "Updates the Order identified by the given universal Id",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdateBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Order updated"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "4. Order",
          "Update"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/get/order/minimal/{orderId}": {
      "post": {
        "operationId": "OrderController_getOrderMinimal",
        "summary": "Retrieves the minimal information of the Order identified by the given universal id",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Order retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Minimal"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "4. Order",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/get/order/base/{orderId}": {
      "post": {
        "operationId": "OrderController_getOrderBase",
        "summary": "Retrieves the base information of the Order identified by the given universal id",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Order retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "4. Order",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/get/order/extended/{orderId}": {
      "post": {
        "operationId": "OrderController_getOrderExtended",
        "summary": "Retrieves the extended information of the Address identified by the given universal id",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Order retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderExtended"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "4. Order",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/get/order/hierarchical/{orderId}": {
      "post": {
        "operationId": "OrderController_getOrderHierarchical",
        "summary": "Retrieves the extended information of the Address identified by the given universal id",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Order retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHierarchical"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "4. Order",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/search/order/minimal": {
      "post": {
        "operationId": "OrderController_searchOrderMinimal",
        "summary": "Retrieves the minimal information of the Orders resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Orders retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "4. Order",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/search/order/base": {
      "post": {
        "operationId": "OrderController_searchOrderBase",
        "summary": "Retrieves the base information of the Orders resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Orders retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderBaseResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "4. Order",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/search/order/extended": {
      "post": {
        "operationId": "OrderController_searchOrderExtended",
        "summary": "Retrieves the extended information of the Orders resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Orders retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderExtendedResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "4. Order",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/event/search/order/hierarchical": {
      "post": {
        "operationId": "OrderController_searchOrderHierarchical",
        "summary": "Retrieves the extended information of the Orders resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Orders retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderHierarchicalResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "4. Order",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/resource/reserve/resource": {
      "post": {
        "operationId": "ResourceController_reserveResource",
        "summary": "Reserves Resources",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "A reservation Id is provided to be kept and used for a future service",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Resources reserved"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESOURCE_NOT_FOUND** - The Resource identified by the given universal id should exist - *returns*: Resource Universal Id\n* **ALREADY_RESERVED** - The Resource identified by the given resource ids is already reserved - *returns*: Resource Universal Id\n\t"
          }
        },
        "tags": [
          "5. Resource"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/resource/releaseAll/reservation/{reservationId}": {
      "post": {
        "operationId": "ResourceController_releaseAllResource",
        "summary": "Releases all the Resources linked to the common Reservation Id",
        "parameters": [
          {
            "name": "reservationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. All Resources released"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The Reservation identified by the given universal id should exist\n\t"
          }
        },
        "tags": [
          "5. Resource"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/resource/release/reservation/{reservationId}": {
      "post": {
        "operationId": "ResourceController_releaseResource",
        "summary": "Releases the Resources linked to the common Reservation Id and identified by the Resources Ids",
        "parameters": [
          {
            "name": "reservationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceIdsBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Resources released"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The Reservation identified by the given universal id should exist\n* **RESOURCE_NOT_FOUND** - The Reservation identified by the given universal id should exist - *returns*: Resource Universal Id\n\t"
          }
        },
        "tags": [
          "5. Resource"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/resource/update/resource/{resourceId}": {
      "post": {
        "operationId": "ResourceController_updateResource",
        "summary": "Updates the Resource identified by the given universal Id",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDescribedBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Resource updated"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "5. Resource",
          "Update"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/resource/get/resource/minimal/{resourceId}": {
      "post": {
        "operationId": "ResourceController_getResourceMinimal",
        "summary": "Retrieves the minimal information of the Resource identified by the given universal id",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Resource retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Minimal"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "5. Resource",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/resource/get/resource/base/{resourceId}": {
      "post": {
        "operationId": "ResourceController_getResourceBase",
        "summary": "Retrieves the base information of the Resource identified by the given universal id",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Resource retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Described"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "5. Resource",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/resource/get/resource/extended/{resourceId}": {
      "post": {
        "operationId": "ResourceController_getResourceExtended",
        "summary": "Retrieves the extended information of the Resource identified by the given universal id",
        "parameters": [
          {
            "name": "resourceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Resource retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Described"
                    },
                    {
                      "$ref": "#/components/schemas/Circuit"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "5. Resource",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/resource/search/resource/minimal": {
      "post": {
        "operationId": "ResourceController_searchResourceMinimal",
        "summary": "Retrieves the minimal information of the Resources resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Resources retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "5. Resource",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/resource/search/resource/base": {
      "post": {
        "operationId": "ResourceController_searchResourceBase",
        "summary": "Retrieves the base information of the Resources resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Resources retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribedResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "5. Resource",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/resource/search/resource/extended": {
      "post": {
        "operationId": "ResourceController_searchResourceExnteded",
        "summary": "Retrieves the extended information of the Resources resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DefaultSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Resources retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceExtendedResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "5. Resource",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/service/update/service/{serviceId}": {
      "post": {
        "operationId": "ServiceController_updateService",
        "summary": "Updates the Service identified by the given universal Id",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDescribedBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Service updated"
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "6. Service",
          "Update"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/service/get/service/minimal/{serviceId}": {
      "post": {
        "operationId": "ServiceController_getServiceMinimal",
        "summary": "Retrieves the minimal information of the Service identified by the given universal id",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Service retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Minimal"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "6. Service",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/service/get/service/base/{serviceId}": {
      "post": {
        "operationId": "ServiceController_getServiceBase",
        "summary": "Retrieves the base information of the Service identified by the given universal id",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Service retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "6. Service",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/service/get/service/extended/{serviceId}": {
      "post": {
        "operationId": "ServiceController_getServiceExtended",
        "summary": "Retrieves the extended information of the Service identified by the given universal id",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Service retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExtended"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "6. Service",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/service/get/service/hierarchical/{serviceId}": {
      "post": {
        "operationId": "ServiceController_getServiceHierarchical",
        "summary": "Retrieves the extended information of the Service identified by the given universal id",
        "parameters": [
          {
            "name": "serviceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success. Service retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceHierarchical"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The instance identified by the given universal id should exist\n\t\t"
          }
        },
        "tags": [
          "6. Service",
          "Get"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/service/search/service/minimal": {
      "post": {
        "operationId": "ServiceController_searchServiceMinimal",
        "summary": "Retrieves the minimal information of the Services resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Services retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MinimalResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "6. Service",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/service/search/service/base": {
      "post": {
        "operationId": "ServiceController_searchServiceBase",
        "summary": "Retrieves the base information of the Services resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Services retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBaseResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "6. Service",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/service/search/service/extended": {
      "post": {
        "operationId": "ServiceController_searchServiceExtended",
        "summary": "Retrieves the extended information of the Services resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Services retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceExtendedResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "6. Service",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/entity/service/search/service/hierarchical": {
      "post": {
        "operationId": "ServiceController_searchServiceHierarchical",
        "summary": "Retrieves the extended information of the Services resulting from the search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceSearchBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Services retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceHierarchicalResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **RESULT_SIZE_TO_LARGE** - The return size is larger than the specified one and the whenResultSizeExceeded is set to notify - *returns*: result size\n* **CUSTOM_ATTRIBUTE_NOT_FOUND** - Custom attribute does not exist - *returns*: Custom attribute and value\n* **CUSTOM_ATTRIBUTE_VALUE_WRONG_TYPE** - Custom attribute value is of the wrong type - *returns*: Custom attribute value type\n\t\t"
          }
        },
        "tags": [
          "6. Service",
          "Search"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/api/v1/eligibility/service/qualify/address/{addressId}": {
      "post": {
        "operationId": "ServiceEligibilityController_qualifyAddress",
        "summary": "Establishes if and how a service could be delivered to an existing address",
        "description": "There are different ways in which a service is valid at a location.\n* Automatic Design - Automatic Provisioning (intact service)\n* Automatic Design - Manual Provisioning (engineer installation required)\n* Manual Design - Manual Provisioning (design required)\n* No Service (shortfall)\n\t",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceTagsBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success. Service qualified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualificationsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Authentication has failed."
          },
          "403": {
            "description": "Forbidden. Endpoint not accessible with provided authentication."
          },
          "404": {
            "description": "Not found. The requested endpoint could not be found."
          },
          "500": {
            "description": "\n### Validation rules\n\n* **ENTITY_NOT_FOUND** - The Address identified by the given universal id should exist\n* **SERVICE_TAG_NOT_FOUND** - The service type identified by the given service tag does not exist - *returns*: Service Tag\n\t\t"
          }
        },
        "tags": [
          "7. Eligibility"
        ],
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Ni2 Deck API Gateway",
    "description": "Ni2 Deck API Gateway Description",
    "version": "1.0.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "Circuit": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "CivicAddress": {
        "type": "object",
        "properties": {
          "street": {
            "type": "string"
          },
          "zip": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "stateProvince": {
            "type": "string"
          },
          "country": {
            "type": "string"
          }
        }
      },
      "Coordinate": {
        "type": "object",
        "properties": {
          "lat": {
            "type": "number"
          },
          "lng": {
            "type": "number"
          }
        }
      },
      "AddressCreateBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "The classification of the new instance"
          },
          "universalId": {
            "type": "string",
            "description": "The universalId of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 200
          },
          "name": {
            "type": "string",
            "description": "The name of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the new instance",
            "maxLength": 255
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add any additional custom attribute values to the new instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "otherAddress": {
            "type": "string"
          },
          "addressComplement": {
            "type": "string"
          },
          "civicAddress": {
            "$ref": "#/components/schemas/CivicAddress"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          }
        },
        "required": [
          "classificationPath",
          "customAttributes"
        ]
      },
      "InstanceURL": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "url": {
            "type": "string",
            "description": "The url of the instance"
          }
        },
        "required": [
          "universalId",
          "url"
        ]
      },
      "AddressUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The modified name of the existing instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add or modify any additional custom attribute values to the existing instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "otherAddress": {
            "type": "string"
          },
          "addressComplement": {
            "type": "string"
          },
          "civicAddress": {
            "$ref": "#/components/schemas/CivicAddress"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "Minimal": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string"
          },
          "otherAddress": {
            "type": "string"
          },
          "addressComplement": {
            "type": "string"
          },
          "civicAddress": {
            "$ref": "#/components/schemas/CivicAddress"
          },
          "coordinate": {
            "$ref": "#/components/schemas/Coordinate"
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes"
        ]
      },
      "AddressSearchFilterBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "This field specifies the classification path on which to search for"
          },
          "classificationContains": {
            "type": "string",
            "description": "This field specifies a string that is contained in one of the classifications of the items on which to search for"
          },
          "name": {
            "type": "string",
            "description": "This field specifies a string that is contained in the name of the items on which to search for"
          },
          "wildcard": {
            "type": "string",
            "description": "This field specifies a string that is contained in one of the default wildcard attributes of the items on which to search for"
          },
          "wildcardAttributes": {
            "description": "This field specifies the list of attributes to be used with the wildcard field",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customAttributes": {
            "type": "object",
            "description": "This field specifies a set of attribute and values on which to filter the result on",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "dataSource": {
            "type": "string"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "AddressSearchBody": {
        "type": "object",
        "properties": {
          "resultSize": {
            "type": "number",
            "description": "This field specifies the maximum size of the result per request"
          },
          "sort": {
            "type": "string",
            "description": "This field specifies the instance attribute that the result sorting should be applied on. This attribute should be one of the fields returned in the result."
          },
          "sortOrder": {
            "type": "number",
            "description": "This field specifies the sorting order of the result",
            "enum": [
              1,
              -1
            ]
          },
          "whenResultSizeExceeded": {
            "type": "string",
            "description": "This field specifies whether to notify or return the given result size in the case of a result that exceeds the provided or default one",
            "enum": [
              "notify",
              "return_threshold"
            ]
          },
          "filter": {
            "$ref": "#/components/schemas/AddressSearchFilterBody"
          }
        }
      },
      "MinimalResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Minimal"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "AddressBaseResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "Contact": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string"
          },
          "extension": {
            "type": "string"
          },
          "alternatePhone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "alternateEmail": {
            "type": "string"
          },
          "addressId": {
            "type": "string"
          }
        }
      },
      "PartyCreateBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "The classification of the new instance"
          },
          "universalId": {
            "type": "string",
            "description": "The universalId of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 200
          },
          "name": {
            "type": "string",
            "description": "The name of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the new instance",
            "maxLength": 255
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add any additional custom attribute values to the new instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "longDescription": {
            "type": "string",
            "description": "The long description of the new instance"
          },
          "responsibilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          }
        },
        "required": [
          "classificationPath",
          "customAttributes"
        ]
      },
      "PartyUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The modified name of the existing instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add or modify any additional custom attribute values to the existing instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The modified description of the existing instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The modified long  of the existing instance"
          },
          "responsibilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "Party": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "responsibilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes",
          "contact"
        ]
      },
      "ContactExtended": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string"
          },
          "extension": {
            "type": "string"
          },
          "alternatePhone": {
            "type": "string"
          },
          "fax": {
            "type": "string"
          },
          "mail": {
            "type": "string"
          },
          "alternateEmail": {
            "type": "string"
          },
          "addressId": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "PartyExtended": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "responsibilities": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "contact": {
            "$ref": "#/components/schemas/ContactExtended"
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes",
          "contact"
        ]
      },
      "SearchFilterBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "This field specifies the classification path on which to search for"
          },
          "classificationContains": {
            "type": "string",
            "description": "This field specifies a string that is contained in one of the classifications of the items on which to search for"
          },
          "name": {
            "type": "string",
            "description": "This field specifies a string that is contained in the name of the items on which to search for"
          },
          "wildcard": {
            "type": "string",
            "description": "This field specifies a string that is contained in one of the default wildcard attributes of the items on which to search for"
          },
          "wildcardAttributes": {
            "description": "This field specifies the list of attributes to be used with the wildcard field",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customAttributes": {
            "type": "object",
            "description": "This field specifies a set of attribute and values on which to filter the result on",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "DefaultSearchBody": {
        "type": "object",
        "properties": {
          "resultSize": {
            "type": "number",
            "description": "This field specifies the maximum size of the result per request"
          },
          "sort": {
            "type": "string",
            "description": "This field specifies the instance attribute that the result sorting should be applied on. This attribute should be one of the fields returned in the result."
          },
          "sortOrder": {
            "type": "number",
            "description": "This field specifies the sorting order of the result",
            "enum": [
              1,
              -1
            ]
          },
          "whenResultSizeExceeded": {
            "type": "string",
            "description": "This field specifies whether to notify or return the given result size in the case of a result that exceeds the provided or default one",
            "enum": [
              "notify",
              "return_threshold"
            ]
          },
          "filter": {
            "description": "This specifies any filters on the results",
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchFilterBody"
              }
            ]
          }
        }
      },
      "PartyBaseResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Party"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "PartyExtendedResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyExtended"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "EventCreateBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "The classification of the new instance"
          },
          "universalId": {
            "type": "string",
            "description": "The universalId of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 200
          },
          "name": {
            "type": "string",
            "description": "The name of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the new instance",
            "maxLength": 255
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add any additional custom attribute values to the new instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "longDescription": {
            "type": "string",
            "description": "The long description of the new instance"
          },
          "customerId": {
            "type": "string"
          },
          "serviceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "originIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "classificationPath",
          "customAttributes"
        ]
      },
      "EventUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The modified name of the existing instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add or modify any additional custom attribute values to the existing instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The modified description of the existing instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The modified long  of the existing instance"
          },
          "customerId": {
            "type": "string"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "Event": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "customerId": {
            "type": "string"
          },
          "serviceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parentIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "originIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documentationIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes"
        ]
      },
      "Service": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "customerId": {
            "type": "string"
          },
          "parentServiceId": {
            "type": "string"
          },
          "subServicesIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes"
        ]
      },
      "Described": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes"
        ]
      },
      "Documentation": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "date": {
            "type": "number"
          },
          "comment": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "submitter": {
            "type": "string"
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name"
        ]
      },
      "EventExtended": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "customer": {
            "$ref": "#/components/schemas/Party"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Described"
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "origins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "documentations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Documentation"
            }
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes"
        ]
      },
      "ServiceHierarchical": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "customer": {
            "$ref": "#/components/schemas/Party"
          },
          "parentService": {
            "$ref": "#/components/schemas/Service"
          },
          "subServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceHierarchical"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Described"
            }
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes"
        ]
      },
      "EventHierarchical": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "customer": {
            "$ref": "#/components/schemas/Party"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceHierarchical"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Described"
            }
          },
          "parents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventHierarchical"
            }
          },
          "origins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventHierarchical"
            }
          },
          "documentations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Documentation"
            }
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes"
        ]
      },
      "EventSearchFilterBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "This field specifies the classification path on which to search for"
          },
          "classificationContains": {
            "type": "string",
            "description": "This field specifies a string that is contained in one of the classifications of the items on which to search for"
          },
          "name": {
            "type": "string",
            "description": "This field specifies a string that is contained in the name of the items on which to search for"
          },
          "wildcard": {
            "type": "string",
            "description": "This field specifies a string that is contained in one of the default wildcard attributes of the items on which to search for"
          },
          "wildcardAttributes": {
            "description": "This field specifies the list of attributes to be used with the wildcard field",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customAttributes": {
            "type": "object",
            "description": "This field specifies a set of attribute and values on which to filter the result on",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "EventSearchBody": {
        "type": "object",
        "properties": {
          "resultSize": {
            "type": "number",
            "description": "This field specifies the maximum size of the result per request"
          },
          "sort": {
            "type": "string",
            "description": "This field specifies the instance attribute that the result sorting should be applied on. This attribute should be one of the fields returned in the result."
          },
          "sortOrder": {
            "type": "number",
            "description": "This field specifies the sorting order of the result",
            "enum": [
              1,
              -1
            ]
          },
          "whenResultSizeExceeded": {
            "type": "string",
            "description": "This field specifies whether to notify or return the given result size in the case of a result that exceeds the provided or default one",
            "enum": [
              "notify",
              "return_threshold"
            ]
          },
          "filter": {
            "$ref": "#/components/schemas/EventSearchFilterBody"
          }
        }
      },
      "EventBaseResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "EventExtendedResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventExtended"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "EventHierarchicalResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventHierarchical"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "ActionBody": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "submitter": {
            "type": "string"
          },
          "event": {
            "$ref": "#/components/schemas/EventUpdateBody"
          }
        },
        "required": [
          "action"
        ]
      },
      "DocumentationCreateBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "submitter": {
            "type": "string"
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add any additional custom attribute values to the new instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "event": {
            "$ref": "#/components/schemas/EventUpdateBody"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "AddDocumentationCreateBody": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/components/schemas/DocumentationCreateBody"
          }
        },
        "required": [
          "body"
        ]
      },
      "DocumentationUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The modified name of the existing instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add or modify any additional custom attribute values to the existing instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "comment": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "submitter": {
            "type": "string"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "NewServiceCreateBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "The classification of the new instance"
          },
          "universalId": {
            "type": "string",
            "description": "The universalId of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 200
          },
          "name": {
            "type": "string",
            "description": "The name of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the new instance",
            "maxLength": 255
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add any additional custom attribute values to the new instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "longDescription": {
            "type": "string",
            "description": "The long description of the new instance"
          },
          "subServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewServiceCreateBody"
            }
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "classificationPath",
          "customAttributes"
        ]
      },
      "OrderNewServiceCreateBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "The classification of the new instance"
          },
          "universalId": {
            "type": "string",
            "description": "The universalId of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 200
          },
          "name": {
            "type": "string",
            "description": "The name of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the new instance",
            "maxLength": 255
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add any additional custom attribute values to the new instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "longDescription": {
            "type": "string",
            "description": "The long description of the new instance"
          },
          "dueDate": {
            "format": "date-time",
            "type": "string"
          },
          "autoSubmit": {
            "type": "boolean"
          },
          "customerId": {
            "type": "string"
          },
          "service": {
            "$ref": "#/components/schemas/NewServiceCreateBody"
          }
        },
        "required": [
          "classificationPath",
          "customAttributes",
          "customerId",
          "service"
        ]
      },
      "OrderExistingServiceCreateBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "The classification of the new instance"
          },
          "universalId": {
            "type": "string",
            "description": "The universalId of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 200
          },
          "name": {
            "type": "string",
            "description": "The name of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the new instance",
            "maxLength": 255
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add any additional custom attribute values to the new instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "longDescription": {
            "type": "string",
            "description": "The long description of the new instance"
          },
          "dueDate": {
            "format": "date-time",
            "type": "string"
          },
          "orderActivity": {
            "type": "string",
            "enum": [
              "Modify",
              "Suspend",
              "Terminate"
            ]
          },
          "autoSubmit": {
            "type": "boolean"
          },
          "customerId": {
            "type": "string"
          },
          "serviceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "serviceId": {
            "type": "string"
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "classificationPath",
          "customAttributes",
          "orderActivity",
          "customerId",
          "resourceIds"
        ]
      },
      "OrderAddOnExistingServiceCreateBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "The classification of the new instance"
          },
          "universalId": {
            "type": "string",
            "description": "The universalId of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 200
          },
          "name": {
            "type": "string",
            "description": "The name of the new instance. If none is provided, one will be automatically generated",
            "maxLength": 255
          },
          "description": {
            "type": "string",
            "description": "The description of the new instance",
            "maxLength": 255
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add any additional custom attribute values to the new instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "longDescription": {
            "type": "string",
            "description": "The long description of the new instance"
          },
          "dueDate": {
            "format": "date-time",
            "type": "string"
          },
          "orderActivity": {
            "type": "string",
            "enum": [
              "Modify",
              "Suspend",
              "Terminate"
            ]
          },
          "autoSubmit": {
            "type": "boolean"
          },
          "customerId": {
            "type": "string"
          },
          "serviceId": {
            "type": "string"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NewServiceCreateBody"
            }
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "classificationPath",
          "customAttributes",
          "customerId",
          "serviceId",
          "services"
        ]
      },
      "OrderUpdateBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The modified name of the existing instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add or modify any additional custom attribute values to the existing instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The modified description of the existing instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The modified long  of the existing instance"
          },
          "dueDate": {
            "format": "date-time",
            "type": "string"
          },
          "orderActivity": {
            "type": "string",
            "enum": [
              "Modify",
              "Suspend",
              "Terminate"
            ]
          },
          "autoSubmit": {
            "type": "boolean"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "dueDate": {
            "format": "date-time",
            "type": "string"
          },
          "orderActivity": {
            "type": "string",
            "enum": [
              "Modify",
              "Suspend",
              "Terminate"
            ]
          },
          "customerId": {
            "type": "string"
          },
          "serviceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "documentationIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes"
        ]
      },
      "OrderExtended": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "dueDate": {
            "format": "date-time",
            "type": "string"
          },
          "orderActivity": {
            "type": "string",
            "enum": [
              "Modify",
              "Suspend",
              "Terminate"
            ]
          },
          "customer": {
            "$ref": "#/components/schemas/Party"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Described"
            }
          },
          "documentations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Documentation"
            }
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes"
        ]
      },
      "OrderHierarchical": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "dueDate": {
            "format": "date-time",
            "type": "string"
          },
          "orderActivity": {
            "type": "string",
            "enum": [
              "Modify",
              "Suspend",
              "Terminate"
            ]
          },
          "customer": {
            "$ref": "#/components/schemas/Party"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceHierarchical"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Described"
            }
          },
          "documentations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Documentation"
            }
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes",
          "customer"
        ]
      },
      "OrderSearchFilterBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "This field specifies the classification path on which to search for"
          },
          "classificationContains": {
            "type": "string",
            "description": "This field specifies a string that is contained in one of the classifications of the items on which to search for"
          },
          "name": {
            "type": "string",
            "description": "This field specifies a string that is contained in the name of the items on which to search for"
          },
          "wildcard": {
            "type": "string",
            "description": "This field specifies a string that is contained in one of the default wildcard attributes of the items on which to search for"
          },
          "wildcardAttributes": {
            "description": "This field specifies the list of attributes to be used with the wildcard field",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customAttributes": {
            "type": "object",
            "description": "This field specifies a set of attribute and values on which to filter the result on",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "OrderSearchBody": {
        "type": "object",
        "properties": {
          "resultSize": {
            "type": "number",
            "description": "This field specifies the maximum size of the result per request"
          },
          "sort": {
            "type": "string",
            "description": "This field specifies the instance attribute that the result sorting should be applied on. This attribute should be one of the fields returned in the result."
          },
          "sortOrder": {
            "type": "number",
            "description": "This field specifies the sorting order of the result",
            "enum": [
              1,
              -1
            ]
          },
          "whenResultSizeExceeded": {
            "type": "string",
            "description": "This field specifies whether to notify or return the given result size in the case of a result that exceeds the provided or default one",
            "enum": [
              "notify",
              "return_threshold"
            ]
          },
          "filter": {
            "$ref": "#/components/schemas/OrderSearchFilterBody"
          }
        }
      },
      "OrderBaseResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "OrderExtendedResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderExtended"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "OrderHierarchicalResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderHierarchical"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "ResourceIdsBody": {
        "type": "object",
        "properties": {
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "resourceIds"
        ]
      },
      "UpdateDescribedBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The modified name of the existing instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "This is a map to add or modify any additional custom attribute values to the existing instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The modified description of the existing instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The modified long  of the existing instance"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "DescribedResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Described"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "ResourceExtendedResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Described"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "ServiceExtended": {
        "type": "object",
        "properties": {
          "universalId": {
            "type": "string",
            "description": "The Universal Id of the instance"
          },
          "category": {
            "type": "string",
            "description": "The Category of the instance"
          },
          "classifications": {
            "description": "The list of classifications of the instance",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "classificationPath": {
            "type": "string",
            "description": "The formatted classification of the instance"
          },
          "name": {
            "type": "string",
            "description": "The Name of the instance"
          },
          "customAttributes": {
            "type": "object",
            "description": "The map of any additional custom attribute values of the instance",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "description": {
            "type": "string",
            "description": "The Description of the instance"
          },
          "longDescription": {
            "type": "string",
            "description": "The Long Description of the instance"
          },
          "customer": {
            "$ref": "#/components/schemas/Party"
          },
          "parentService": {
            "$ref": "#/components/schemas/Service"
          },
          "subServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Described"
            }
          }
        },
        "required": [
          "universalId",
          "category",
          "classifications",
          "classificationPath",
          "name",
          "customAttributes"
        ]
      },
      "ServiceSearchFilterBody": {
        "type": "object",
        "properties": {
          "classificationPath": {
            "type": "string",
            "description": "This field specifies the classification path on which to search for"
          },
          "classificationContains": {
            "type": "string",
            "description": "This field specifies a string that is contained in one of the classifications of the items on which to search for"
          },
          "name": {
            "type": "string",
            "description": "This field specifies a string that is contained in the name of the items on which to search for"
          },
          "wildcard": {
            "type": "string",
            "description": "This field specifies a string that is contained in one of the default wildcard attributes of the items on which to search for"
          },
          "wildcardAttributes": {
            "description": "This field specifies the list of attributes to be used with the wildcard field",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customAttributes": {
            "type": "object",
            "description": "This field specifies a set of attribute and values on which to filter the result on",
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "boolean"
                }
              ]
            }
          },
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          }
        },
        "required": [
          "customAttributes"
        ]
      },
      "ServiceSearchBody": {
        "type": "object",
        "properties": {
          "resultSize": {
            "type": "number",
            "description": "This field specifies the maximum size of the result per request"
          },
          "sort": {
            "type": "string",
            "description": "This field specifies the instance attribute that the result sorting should be applied on. This attribute should be one of the fields returned in the result."
          },
          "sortOrder": {
            "type": "number",
            "description": "This field specifies the sorting order of the result",
            "enum": [
              1,
              -1
            ]
          },
          "whenResultSizeExceeded": {
            "type": "string",
            "description": "This field specifies whether to notify or return the given result size in the case of a result that exceeds the provided or default one",
            "enum": [
              "notify",
              "return_threshold"
            ]
          },
          "filter": {
            "$ref": "#/components/schemas/ServiceSearchFilterBody"
          }
        }
      },
      "ServiceBaseResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Service"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "ServiceExtendedResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceExtended"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "ServiceHierarchicalResultResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "number",
            "description": "This specifies the number of elements returned by the search"
          },
          "reachedThreshold": {
            "type": "boolean",
            "description": "This specifies whether the result of the search reached the threshold"
          },
          "content": {
            "description": "This is the result of the search",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceHierarchical"
            }
          }
        },
        "required": [
          "totalElements",
          "reachedThreshold",
          "content"
        ]
      },
      "ServiceTagsBody": {
        "type": "object",
        "properties": {
          "serviceTags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Qualification": {
        "type": "object",
        "properties": {
          "serviceTag": {
            "type": "string"
          },
          "qualified": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "serviceTag",
          "qualified",
          "description"
        ]
      },
      "QualificationsResponse": {
        "type": "object",
        "properties": {
          "qualifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Qualification"
            }
          }
        },
        "required": [
          "qualifications"
        ]
      }
    }
  }
}
